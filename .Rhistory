#one hot encoding of days
#bike <-bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
#selecting the columns we want
want <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','endingm','days')
df2 <- bike[,(names(bike) %in% want)]
#Delete the na
df<-na.omit(df2)
df %>% drop_na()
#make member_casual to be the first column
colnames(df)
df_rt <- df %>%
select('rideable_type', everything())
df_rt
df_rt%>%group_by(rideable_type)%>%
summarise(count = n())
df_rt %>% count(rideable_type)
ggplot(df_rt, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
set.seed(123)
stratified1 = (df_rt %>% select(rideable_type, Total_Time, member_casual, start_station_id, startingm, endingm, days))
stratified <- stratified1 %>%
group_by(rideable_type) %>%
sample_n(size=5000)
#str(stratified)
df_rt = data.frame(stratified)
#df_rt_check <-subset(df_rt, end_station_id == 0)
#scaleddf <- as.data.frame(scale(df[2:13], center = TRUE, scale = TRUE))
set.seed(333)
df_sample_rt <- sample(2, nrow(df_rt), replace=TRUE, prob=c(0.80, 0.20))
Rt_train_X <- df_rt[df_sample_rt==1, 1:7]
Rt_test_X <- df_rt[df_sample_rt==2, 1:7]
Rt_train_y <- df_rt[df_sample_rt==1, 1]
Rt_test_y <- df_rt[df_sample_rt==2, 1]
df_rt
#deleted start_station_id and Wed coz the model says it is not much predictable
Bike_Type_Logit <- glm(rideable_type ~ Total_Time + member_casual + start_station_id + end_station_id + endingm, data = as.data.frame(Rt_train_X), family = "binomial", na.action=na.omit)
#deleted start_station_id and Wed coz the model says it is not much predictable
Bike_Type_Logit <- glm(rideable_type ~ Total_Time + member_casual + start_station_id + endingm, data = as.data.frame(Rt_train_X), family = "binomial", na.action=na.omit)
summary(Bike_Type_Logit)
prob=predict(Bike_Type_Logit, type = "response")
e <- roc(Rt_train_y~prob)
auc(e) # area-under-curve
plot(e)
proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
Rt_test_X$proc=proc
roc <- roc(rideable_type~proc, data= Rt_test_X)
print(roc)
proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
Rt_test_X$proc=proc
roc <- roc(rideable_type~proc, data= Rt_test_X)
print(roc)
plot(e)
knitr::opts_chunk$set(echo = TRUE)
library(purrr)   #to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
#bind all the files in this path together
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
bike%>%group_by(rideable_type)%>%
summarise(count = n())
#Remove docked bikes
bike <-subset(bike, rideable_type != "docked_bike")
bike%>%group_by(rideable_type)%>%
summarise(count = n())
#70% is unbalanced data set and this cut is more than that
dim(bike)
quartiles <- quantile(bike$Sepal.Width, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(bike$Sepal.Width)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
data_no_outlier <- subset(bike, bike$Sepal.Width > Lower & bike$Sepal.Width < Upper)
dim(data_no_outlier)
data_no_outlier
bike$rideable_type <- factor(as.integer(factor(bike$rideable_type)))
bike$start_station_id <- factor(bike$start_station_id)
bike$end_station_id <- factor(bike$end_station_id)
# make it to casual = 0, member= 1
bike$member_casual<-factor(ifelse(bike$member_casual=='casual',0,1))
# split started_at/ ended_at to date column and time column
# change start_date/end_date to date type
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
# covert date to date type to get the time differnce
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
#bike$Total_Time <- round(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")),2)
bike$Total_Time <- abs(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")))
# take only the day from the date
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$days <- factor(format(bike$start_date, format = "%a"))
bike
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
res <- hm(bike$end_time)# format to 'hours:minutes'
bike$endingm <- hour(res)*60 + minute(res)
#one hot encoding of days
#bike <-bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
#selecting the columns we want
want <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','endingm','days')
df2 <- bike[,(names(bike) %in% want)]
#Delete the na
df<-na.omit(df2)
df %>% drop_na()
#make member_casual to be the first column
colnames(df)
df_rt <- df %>%
select('rideable_type', everything())
df_rt
df_rt%>%group_by(rideable_type)%>%
summarise(count = n())
df_rt %>% count(rideable_type)
ggplot(df_rt, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
set.seed(123)
stratified1 = (df_rt %>% select(rideable_type, Total_Time, member_casual, start_station_id, start_station_id, startingm, endingm, days))
stratified <- stratified1 %>%
group_by(rideable_type) %>%
sample_n(size=5000)
#str(stratified)
df_rt = data.frame(stratified)
df_rt %>% drop_na()
#df_rt_check <-subset(df_rt, end_station_id == 0)
#scaleddf <- as.data.frame(scale(df[2:13], center = TRUE, scale = TRUE))
set.seed(333)
df_sample_rt <- sample(2, nrow(df_rt), replace=TRUE, prob=c(0.80, 0.20))
Rt_train_X <- df_rt[df_sample_rt==1, 1:7]
Rt_test_X <- df_rt[df_sample_rt==2, 1:7]
Rt_train_y <- df_rt[df_sample_rt==1, 1]
Rt_test_y <- df_rt[df_sample_rt==2, 1]
df_rt
#deleted start_station_id and Wed coz the model says it is not much predictable
Bike_Type_Logit <- glm(rideable_type ~ Total_Time + member_casual + start_station_id + endingm, data = as.data.frame(Rt_train_X), family = "binomial", na.action=na.omit)
summary(Bike_Type_Logit)
prob=predict(Bike_Type_Logit, type = "response")
e <- roc(Rt_train_y~prob)
auc(e) # area-under-curve
plot(e)
proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
Rt_test_X$proc=proc
roc <- roc(rideable_type~proc, data= Rt_test_X)
print(roc)
plot(roc)
#prob=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#e <- roc(Rt_train_y~prob)
#auc(e) # area-under-curve
#plot(e)
prob=predict(Bike_Type_Logit, type = "response")
e <- roc(Rt_train_y~prob)
auc(e) # area-under-curve
plot(e)
proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
Rt_test_X$proc=proc
roc <- roc(rideable_type~proc, data= Rt_test_X)
print(roc)
plot(roc)
#prob=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#e <- roc(Rt_train_y~prob)
#auc(e) # area-under-curve
#plot(e)
#proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#Rt_test_X$proc=proc
#roc <- roc(rideable_type~proc, data= Rt_test_X)
#print(roc)
#plot(roc)
#prob=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#e <- roc(Rt_train_y~prob)
#auc(e) # area-under-curve
#plot(e)
proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
test_X$proc=proc
#proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#Rt_test_X$proc=proc
#roc <- roc(rideable_type~proc, data= Rt_test_X)
#print(roc)
#plot(roc)
#prob=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#e <- roc(Rt_train_y~prob)
#auc(e) # area-under-curve
#plot(e)
proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
RT_test_X$proc=proc
#proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#Rt_test_X$proc=proc
#roc <- roc(rideable_type~proc, data= Rt_test_X)
#print(roc)
#plot(roc)
#prob=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#e <- roc(Rt_train_y~prob)
#auc(e) # area-under-curve
#plot(e)
proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
Rt_test_X$proc=proc
roc <- roc(rideable_type~proc)
#proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#Rt_test_X$proc=proc
#roc <- roc(rideable_type~proc, data= Rt_test_X)
#print(roc)
#plot(roc)
#prob=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#e <- roc(Rt_train_y~prob)
#auc(e) # area-under-curve
#plot(e)
proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
Rt_test_X$proc=proc
roc <- roc(Rt_train_y~proc)
#scaleddf <- as.data.frame(scale(df[2:13], center = TRUE, scale = TRUE))
set.seed(333)
df_sample_rt <- sample(2, nrow(df_rt), replace=TRUE, prob=c(0.80, 0.20))
#Rt_train_X <- df_rt[df_sample_rt==1, 1:7]
#Rt_test_X <- df_rt[df_sample_rt==2, 1:7]
Rt_train_X <- df_rt[df_sample_rt==1, 2:7]
Rt_test_X <- df_rt[df_sample_rt==2, 2:7]
Rt_train_y <- df_rt[df_sample_rt==1, 1]
Rt_test_y <- df_rt[df_sample_rt==2, 1]
df_rt
#deleted start_station_id and Wed coz the model says it is not much predictable
Bike_Type_Logit <- glm(rideable_type ~ Total_Time + member_casual + start_station_id + endingm, data = as.data.frame(Rt_train_X), family = "binomial", na.action=na.omit)
#deleted start_station_id and Wed coz the model says it is not much predictable
Bike_Type_Logit <- glm(rideable_type ~ Total_Time + member_casual + start_station_id + endingm, data = as.data.frame(Rt_train_X), family = "binomial", na.action=na.omit)
#deleted start_station_id and Wed coz the model says it is not much predictable
Bike_Type_Logit <- glm(Rt_train_y ~ Total_Time + member_casual + start_station_id + endingm, data = as.data.frame(Rt_train_X), family = "binomial", na.action=na.omit)
#Bike_Type_Logit <- glm(rideable_type ~ Total_Time + member_casual + start_station_id + endingm, data = as.data.frame(Rt_train_X), family = "binomial", na.action=na.omit)
summary(Bike_Type_Logit)
predict()
prob=predict(Bike_Type_Logit, type = "response")
e <- roc(Rt_train_y~prob)
auc(e) # area-under-curve
plot(e)
#proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#Rt_test_X$proc=proc
#roc <- roc(rideable_type~proc, data= Rt_test_X)
#print(roc)
#plot(roc)
#prob=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#e <- roc(Rt_train_y~prob)
#auc(e) # area-under-curve
#plot(e)
proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
Rt_test_X$proc=proc
roc <- roc(Rt_train_y~proc)
#scaleddf <- as.data.frame(scale(df[2:13], center = TRUE, scale = TRUE))
set.seed(333)
df_sample_rt <- sample(2, nrow(df_rt), replace=TRUE, prob=c(0.80, 0.20))
Rt_train_X <- df_rt[df_sample_rt==1, 1:7]
Rt_test_X <- df_rt[df_sample_rt==2, 1:7]
Rt_train_y <- df_rt[df_sample_rt==1, 1]
Rt_test_y <- df_rt[df_sample_rt==2, 1]
df_rt
#deleted start_station_id and Wed coz the model says it is not much predictable
Bike_Type_Logit <- glm(rideable_type ~ Total_Time + member_casual + start_station_id + endingm, data = as.data.frame(Rt_train_X), family = "binomial", na.action=na.omit)
summary(Bike_Type_Logit)
predict()
prob=predict(Bike_Type_Logit, type = "response")
e <- roc(Rt_train_y~prob)
auc(e) # area-under-curve
plot(e)
#proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#Rt_test_X$proc=proc
#roc <- roc(rideable_type~proc, data= Rt_test_X)
#print(roc)
#plot(roc)
#prob=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#e <- roc(Rt_train_y~prob)
#auc(e) # area-under-curve
#plot(e)
proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
Rt_test_X$proc=proc
roc <- roc(Rt_train_y~proc)
proc=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
Rt_test_X$proc=proc
roc <- roc(rideable_type~proc, data= Rt_test_X)
print(roc)
plot(roc)
#prob=predict(Bike_Type_Logit, type = "response", newdata = Rt_test_X)
#e <- roc(Rt_train_y~prob)
#auc(e) # area-under-curve
#plot(e)
Rt_test_X
Rt_train_X
knitr::opts_chunk$set(echo = TRUE)
library(purrr)   #to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(class)
library(gmodels)
library(FNN)
#bind all the files in this path together
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
bike%>%group_by(rideable_type)%>%
summarise(count = n())
#Remove docked bikes
bike <-subset(bike, rideable_type != "docked_bike")
bike%>%group_by(rideable_type)%>%
summarise(count = n())
#70% is unbalanced data set and this cut is more than that
bike$rideable_type <- factor(as.integer(factor(bike$rideable_type)))
bike$start_station_id <- factor(bike$start_station_id)
bike$end_station_id <- factor(bike$end_station_id)
# make it to casual = 0, member= 1
bike$member_casual<-factor(ifelse(bike$member_casual=='casual',0,1))
# split started_at/ ended_at to date column and time column
# change start_date/end_date to date type
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
# covert date to date type to get the time differnce
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
#bike$Total_Time <- round(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")),2)
bike$Total_Time <- abs(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")))
# take only the day from the date
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$days <- factor(format(bike$start_date, format = "%a"))
bike
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
res <- hm(bike$end_time)# format to 'hours:minutes'
bike$endingm <- hour(res)*60 + minute(res)
#one hot encoding of days
#bike <-bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
#selecting the columns we want
want <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','endingm','days')
df2 <- bike[,(names(bike) %in% want)]
#Delete the na
df<-na.omit(df2)
df %>% drop_na()
#make member_casual to be the first column
colnames(df)
df_rt <- df %>%
select('rideable_type', everything())
df_rt
df_rt%>%group_by(rideable_type)%>%
summarise(count = n())
df_rt %>% count(rideable_type)
ggplot(df_rt, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
set.seed(123)
stratified1 = (df_rt %>% select(rideable_type, Total_Time, member_casual, start_station_id, startingm, endingm, days))
stratified <- stratified1 %>%
group_by(rideable_type) %>%
sample_n(size=5000)
#str(stratified)
df_rt = data.frame(stratified)
#df_rt_check <-subset(df_rt, end_station_id == 0)
View(df_rt)
knn.5 <- knn(train=Rt_train_X, test=Rt_test_X, cl=Rt_train_y, k=5)
#scaleddf <- as.data.frame(scale(df[2:13], center = TRUE, scale = TRUE))
set.seed(333)
df_sample_rt <- sample(2, nrow(df_rt), replace=TRUE, prob=c(0.80, 0.20))
Rt_train_X <- df_rt[df_sample_rt==1, 2:7]
Rt_test_X <- df_rt[df_sample_rt==2, 2:7]
Rt_train_y <- df_rt[df_sample_rt==1, 1]
Rt_test_y <- df_rt[df_sample_rt==2, 1]
df_rt
knn.5 <- knn(train=Rt_train_X, test=Rt_test_X, cl=Rt_train_y, k=5)
df_rt_knn <- as.data.frame(df_rt[-c(7)])
df_rt_knn$rideable_type <- as.numeric(df_rt$rideable_type)
df_rt_knn$Total_Time <- as.numeric(df_rt$Total_Time)
df_rt_knn$member_casual <- as.numeric(df_rt$member_casual)
df_rt_knn$start_station_id <- as.numeric(df_rt$start_station_id)
df_rt_knn$startingm <- as.numeric(df_rt$startingm)
df_rt_knn$endingm <- as.numeric(df_rt$endingm)
df_rt_knn
knn.5 <- knn(train=Rt_train_X, test=Rt_test_X, cl=Rt_train_y, k=5)
set.seed(333)
df_sample_rt <- sample(2, nrow(df_rt_knn), replace=TRUE, prob=c(0.80, 0.20))
DF_Rt_train_X <- df_rt_knn[df_sample_rt==1, 2:7]
scaleddf <- as.data.frame(scale(df_rt_knn[2:6], center = TRUE, scale = TRUE))
set.seed(1000)
df_sample_rt <- sample(2, nrow(df_rt_knn), replace=TRUE, prob=c(0.80, 0.20))
DF_Rt_train_X <- df_rt_knn[df_sample_rt==1, 2:6]
DF_Rt_test_X <- df_rt_knn[df_sample_rt==2, 2:6]
DF_Rt_train_y <- df_rt_knn[df_sample_rt==1, 1]
DF_Rt_test_y <- df_rt_knn[df_sample_rt==2, 1]
df_rt_knn
knn.5 <- knn(train=Rt_train_X, test=Rt_test_X, cl=Rt_train_y, k=5)
knn.5 <- knn(train=DF_Rt_train_X, test=DF_Rt_test_X, cl=DF_Rt_train_y, k=5)
#ACC.5=100 * sum(nasa_test.labels == knn.5)/NROW(nasa_test.labels)
#paste0("Accuracy = ", ACC.5)
#print(confusionMatrix(knn.5, as.factor(nasa_test.labels) ))
knn1 <- knn(train=DF_Rt_train_X, test=DF_Rt_test_X, cl=DF_Rt_train_y, k=5)
#ACC.5=100 * sum(nasa_test.labels == knn.5)/NROW(nasa_test.labels)
#paste0("Accuracy = ", ACC.5)
#print(confusionMatrix(knn.5, as.factor(nasa_test.labels) ))
knn1
knn1 <- knn(train=DF_Rt_train_X, test=DF_Rt_test_X, cl=DF_Rt_train_y, k=5)
#ACC.5=100 * sum(nasa_test.labels == knn.5)/NROW(nasa_test.labels)
#paste0("Accuracy = ", ACC.5)
#print(confusionMatrix(knn.5, as.factor(nasa_test.labels) ))
knn_crosst <- gmodels::CrossTable(DF_RT_test_y, train = knn1, prop.chisq = FALSE)
knn_crosst <- gmodels::CrossTable(DF_Rt_test_y, train = knn1, prop.chisq = FALSE)
knn1 <- knn(train=DF_Rt_train_X, test=DF_Rt_test_X, cl=DF_Rt_train_y, k=5)
knn_crosst <- gmodels::CrossTable(DF_Rt_test_y, train = knn1, prop.chisq = FALSE)
# create an empty dataframe to store the results from confusion matrices
ResultDf = data.frame( k=numeric(0), Total.Accuracy= numeric(0), row.names = NULL )
kval = 3
knn_pred <- knn(train = DF_Rt_train_X, test = DF_Rt_test_X, cl=DF_Rt_train_y, k=kval)
knn_crosst <- gmodels::CrossTable(DF_Rt_test_y, train = knn_pred, prop.chisq = FALSE)
print( paste("k = ", kval) )
knn_crosst
library(caret)
cm <- confusionMatrix(knn_pred, reference = as.factor(DF_Rt_test_y))
cmaccu = cm$overall['Accuracy']
print( paste("Total Accuracy = ", cmaccu ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print( xkabledply(   as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) ) )
library(caret)
cm <- confusionMatrix(knn_pred, reference = as.factor(DF_Rt_test_y))
cmaccu = cm$overall['Accuracy']
print( paste("Total Accuracy = ", cmaccu ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
print( xkabledply(data.frame(cm$byClass), title=paste("k = ",kval)) )
print(data.frame(cm$byClass), title=paste("k = ",kval))
for (kval in 4:11) {
knn_pred <- knn(train = DF_Rt_train_X, test = DF_Rt_test_X, cl=DF_Rt_train_y, k=kval)
knn_crosst <- CrossTable(DF_Rt_test_y, knn_pred, prop.chisq = FALSE)
print( paste("k = ", kval) )
knn_crosst
#
cm = confusionMatrix(knn_pred, reference = as.factor(DF_Rt_test_y))
cmaccu = cm$overall['Accuracy']
print( paste("Total Accuracy = ", cmaccu ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
print(data.frame(cm$byClass), title=paste("k = ",kval))
}
print(ResultDf, "Total Accuracy Summary")
table(df_rt_knn)
table(df_rt_knn$rideable_type)
scaleddf <- as.data.frame(scale(df_rt_knn[2:6], center = TRUE, scale = TRUE))
set.seed(333)
df_sample_rt <- sample(2, nrow(df_rt_knn), replace=TRUE, prob=c(0.75, 0.25))
DF_Rt_train_X <- df_rt_knn[df_sample_rt==1, 2:6]
DF_Rt_test_X <- df_rt_knn[df_sample_rt==2, 2:6]
DF_Rt_train_y <- df_rt_knn[df_sample_rt==1, 1]
DF_Rt_test_y <- df_rt_knn[df_sample_rt==2, 1]
df_rt_knn
knn1 <- knn(train=DF_Rt_train_X, test=DF_Rt_test_X, cl=DF_Rt_train_y, k=5)
knn_crosst <- gmodels::CrossTable(DF_Rt_test_y, train = knn1, prop.chisq = FALSE)
# create an empty dataframe to store the results from confusion matrices
ResultDf = data.frame( k=numeric(0), Total.Accuracy= numeric(0), row.names = NULL )
kval = 3
knn_pred <- knn(train = DF_Rt_train_X, test = DF_Rt_test_X, cl=DF_Rt_train_y, k=kval)
knn_crosst <- gmodels::CrossTable(DF_Rt_test_y, train = knn_pred, prop.chisq = FALSE)
print( paste("k = ", kval) )
knn_crosst
library(caret)
cm <- confusionMatrix(knn_pred, reference = as.factor(DF_Rt_test_y))
cmaccu = cm$overall['Accuracy']
print( paste("Total Accuracy = ", cmaccu ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
print(data.frame(cm$byClass), title=paste("k = ",kval))
for (kval in 4:11) {
knn_pred <- knn(train = DF_Rt_train_X, test = DF_Rt_test_X, cl=DF_Rt_train_y, k=kval)
knn_crosst <- CrossTable(DF_Rt_test_y, knn_pred, prop.chisq = FALSE)
print( paste("k = ", kval) )
knn_crosst
#
cm = confusionMatrix(knn_pred, reference = as.factor(DF_Rt_test_y))
cmaccu = cm$overall['Accuracy']
print( paste("Total Accuracy = ", cmaccu ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
print(data.frame(cm$byClass), title=paste("k = ",kval))
}
print(ResultDf, "Total Accuracy Summary")
