library(pROC)
#bind all the files in this path together
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
#bike <- data.frame(read.csv("bo.csv"))
bike$rideable_type <- factor(bike$rideable_type)
bike$member_casual <- factor(bike$member_casual)
# split started_at/ ended_at to date column and time column
# change start_date/end_date to date type
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
bike$Total_Time <- round(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")),2)
#take the day to another column and delete the year and month
# make a plot to check if there is relationship between the days and the number of casual or members
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
bike$days <- format(bike$start_date, format = "%a")
bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
library(dplyr)
library(tidyr)
bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
#selecting the columns we want
want <- c('member_casual', 'rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
#Delete the na
df<-na.omit(df2)
#selecting the columns we want
want <- c('member_casual', 'rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
#Delete the na
df<-na.omit(df2)
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
want <- c('member_casual', 'rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
df<-na.omit(df2)
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
bike <-bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
#selecting the columns we want
want <- c('member_casual', 'rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
#Delete the na
df<-na.omit(df2)
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
summary(customerLogit)
prob=predict(customerLogit, type = "response" )
df$prob=prob
e <- roc(member_casual~prob, data=df)
auc(e) # area-under-curve
plot(e)
want <- c('member_casual', 'rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type')
df2 <- bike[,(names(bike) %in% want)]
df<-na.omit(df2)
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm, data = df, family = "binomial")
summary(customerLogit)
prob=predict(customerLogit, type = "response" )
df$prob=prob
e <- roc(member_casual~prob, data=df)
auc(e) # area-under-curve
plot(e)
<<<<<<< Updated upstream
knitr::opts_chunk$set(echo = TRUE)
library(purrr)#to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
#bind all the files in this path together
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
#bike <- data.frame(read.csv("bo.csv"))
bike$rideable_type <- factor(bike$rideable_type)
bike$member_casual <- factor(bike$member_casual)
# split started_at/ ended_at to date column and time column
# change start_date/end_date to date type
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
bike$Total_Time <- round(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")),2)
bike$days <- format(bike$start_date, format = "%a")
#take the day to another column and delete the year and month
# make a plot to check if there is relationship between the days and the number of casual or members
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
#one hot incoding of days
bike <-bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
#selecting the columns we want
want <- c('member_casual', 'rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
#Delete the na
df<-na.omit(df2)
agesurvive = xtabs(~ member_casual + rideable_type, data = df)
chisq.test(agesurvive)
agesurvive2 = xtabs(~ member_casual + Total_Time, data = df)
chisq.test(agesurvive2)
agesurvive3 = xtabs(~ member_casual + start_station_id , data = df)
chisq.test(agesurvive3)
agesurvive4 = xtabs(~ member_casual + end_station_id , data = df)
chisq.test(agesurvive4)
agesurvive5 = xtabs(~ member_casual + startingm , data = df)
chisq.test(agesurvive5)
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
summary(customerLogit)
prob=predict(customerLogit, type = "response" )
df$prob=prob
e <- roc(member_casual~prob, data=df)
auc(e) # area-under-curve
plot(e)
confusionMatrix(actual=customerLogit$y,predicted=customerLogit$fitted.values)
#make a graph to see how many members and casuales you have.
#Can we o interaction?
customerLogit <- glm(member_casual ~ end_station_id:start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
summary(customerLogit)
#Can we o interaction?
customerLogit <- glm(member_casual ~ end_station_id:start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
summary(customerLogit)
#Can we o interaction?
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
summary(customerLogit)
#Can we o interaction?
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm:(Fri+Mon+Sat+Sun+Thu+Tue+Wed), data = df, family = "binomial")
summary(customerLogit)
prob=predict(customerLogit, type = "response" )
df$prob=prob
e <- roc(member_casual~prob, data=df)
auc(e) # area-under-curve
plot(e)
confusionMatrix(actual=customerLogit$y,predicted=customerLogit$fitted.values)
#make a graph to see how many members and casuales you have.
df1<-na.omit(df2)
df <- scale(df1)
df2$member_casual <- as.numeric(df2$member_casual)
df1<-na.omit(df2)
df <- scale(df1)
str(df1)
df2$rideable_type <- as.numeric(df2$rideable_type)
df1<-na.omit(df2)
df <- scale(df1)
scaled.dat <- scale(df1)
colMeans(scaled.dat)
apply(scaled.dat, 2, sd)
df<-na.omit(df2)
data.Normalization (df,type="n1",normalization="column")
install.packages("clusterSim")
library(clusterSim)
data.Normalization (df,type="n1",normalization="column")
want <- c('rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
df2$member_casual <- as.numeric(df2$member_casual)
df2$rideable_type <- as.numeric(df2$rideable_type)
data.Normalization (df,type="n1",normalization="column")
df1$rideable_type <- as.numeric(df1$rideable_type)
df <- data.Normalization (df1,type="n1",normalization="column")
df$member_casual <- df1$member_casual
str(df)
bike$member_casual <- factor(bike$member_casual)
#selecting the columns we want
want <- c('rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
df1<-na.omit(df2)#Delete the na
#preparing columns to numerical to normalize the scale
df1$rideable_type <- as.numeric(df1$rideable_type)
df <- data.Normalization (df1,type="n1",normalization="column")
# add the casual_member column
df$member_casual <- df1$member_casual
str(df)
df<- select(df1,member_casual)
df <- df1$member_casual
#selecting the columns we want
want <- c('rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
df1<-na.omit(df2)#Delete the na
#preparing columns to numerical to normalize the scale
df1$rideable_type <- as.numeric(df1$rideable_type)
df <- data.Normalization (df1,type="n1",normalization="column")
# add the casual_member column
df <- c(df1$member_casual)
str(df)
df <- data.Normalization (df1,type="n1",normalization="column")
str(df)
df["member_casual"] <- df1["member_casual"]
df["member_casuals"] <- df1["member_casual"]
df["member_casual"] <- df1["member_casual",]
str(df)
df["member_casual"] <- bike["member_casual",]
str(df)
library(lubridate)# for duration of time
knitr::opts_chunk$set(echo = TRUE)
library(purrr)#to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
<<<<<<< Updated upstream
#bind all the files in this path together
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
#bike <- data.frame(read.csv("bo.csv"))
bike$rideable_type <- factor(bike$rideable_type)
bike$member_casual <- factor(bike$member_casual)
# split started_at/ ended_at to date column and time column
# change start_date/end_date to date type
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
bike$Total_Time <- round(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")),2)
bike$days <- format(bike$start_date, format = "%a")
#take the day to another column and delete the year and month
# make a plot to check if there is relationship between the days and the number of casual or members
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
#one hot incoding of days
bike <-bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
want <- c('rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
df1<-na.omit(df2)#Delete the na
want <- c('rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed', 'casual_memver')
df<- bike[,(names(bike) %in% want)]
want <- c('rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
df1<-na.omit(df2)
df1$rideable_type <- as.numeric(df1$rideable_type)
df <- data.Normalization (df1,type="n1",normalization="column")
library(clusterSim)
knitr::opts_chunk$set(echo = TRUE)
library(purrr)#to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(clusterSim)#for scale normalization
df <- data.Normalization (df1,type="n1",normalization="column")
df$casual_member<-df1[,df$casual_member]
str(df)
df$casual_member<-df$casual_member
str(df)
df$casual_member<-df1$casual_member
str(df)
df$casual_member<-df1[,df1$casual_member]
str(df)
df$casual_member<-df1[:,df1$casual_member]
df$member_casual<- df1$member_casual
str(df)
df$member_casual<- bike$member_casual
df1<-na.omit(bike)#Delete the na
#selecting the columns we want
want <- c('rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
'casual_member'
df2 <- df1[,(names(df1) %in% want)]
#preparing columns to numerical to normalize the scale
df2$rideable_type <- as.numeric(df2$rideable_type)
df <- data.Normalization (df2,type="n1",normalization="column")
# add the casual_member column
df$member_casual<- bike$member_casual
df$member_casual<- df1$member_casual
str(df)
agesurvive = xtabs(~ member_casual + rideable_type, data = df)
chisq.test(agesurvive)
agesurvive2 = xtabs(~ member_casual + Total_Time, data = df)
chisq.test(agesurvive2)
#Can we o interaction?
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm:(Fri+Mon+Sat+Sun+Thu+Tue+Wed), data = df, family = "binomial")
summary(customerLogit)
prob=predict(customerLogit, type = "response" )
df$prob=prob
e <- roc(member_casual~prob, data=df)
auc(e) # area-under-curve
plot(e)
confusionMatrix(actual=customerLogit$y,predicted=customerLogit$fitted.values)
#make a graph to see how many members and casuales you have.
knitr::opts_chunk$set(echo = TRUE)
library(purrr)#to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time:rideable_type+ startingm:(Fri+Mon+Sat+Sun+Thu+Tue+Wed), data = df, family = "binomial")
summary(customerLogit)
prob=predict(customerLogit, type = "response" )
df$prob=prob
e <- roc(member_casual~prob, data=df)
auc(e) # area-under-curve
plot(e)
customerLogit <- glm(member_casual ~ end_station_id:start_station_id+Total_Time+rideable_type+ startingm:(Fri+Mon+Sat+Sun+Thu+Tue+Wed), data = df, family = "binomial")
summary(customerLogit)
prob=predict(customerLogit, type = "response" )
df$prob=prob
e <- roc(member_casual~prob, data=df)
auc(e) # area-under-curve
plot(e)
knitr::opts_chunk$set(echo = TRUE)
library(purrr)   #to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
#bind all the files in this path together
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
bike%>%group_by(member_casual)%>%
summarise(count = n())
#70% is unbalanced data set and this cut is more than that
bike$rideable_type <- factor(as.integer(factor(bike$rideable_type)))
bike$start_station_id <- factor(bike$start_station_id)
bike$end_station_id <- factor(bike$end_station_id)
# make it to casual = 0, member= 1
bike$member_casual<-factor(ifelse(bike$member_casual=='casual',0,1))
# split started_at/ ended_at to date column and time column
# change start_date/end_date to date type
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
# covert date to date type to get the time differnce
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
bike$Total_Time <- round(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")),2)
# take only the day from the date
bike$start_date <- as.Date(bike$started_at)
bike$days <- format(bike$start_date, format = "%a")
bike$days <- factor(format(bike$start_date, format = "%a"))
bike$rideable_type <- factor(as.integer(factor(bike$rideable_type)))
bike$start_station_id <- factor(bike$start_station_id)
bike$end_station_id <- factor(bike$end_station_id)
# make it to casual = 0, member= 1
bike$member_casual<-factor(ifelse(bike$member_casual=='casual',0,1))
# split started_at/ ended_at to date column and time column
# change start_date/end_date to date type
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
# covert date to date type to get the time differnce
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
bike$Total_Time <- round(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")),2)
# take only the day from the date
bike$start_date <- as.Date(bike$started_at)
bike$days <- factor(format(bike$start_date, format = "%a"))
# Check the structure again
str(bike)
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
str(bike)
#one hot encoding of days
# bike <-bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
#selecting the columns we want
want <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm', 'days')
df2 <- bike[,(names(bike) %in% want)]
#Delete the na
df<-na.omit(df2)
#make member_casual to be the first column
colnames(df)
df <- df %>%
select('member_casual', everything())
#selecting the columns we want
want <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm', 'days')
df2 <- bike[,(names(bike) %in% want)]
#Delete the na
df<-na.omit(df2)
#make member_casual to be the first column
colnames(df)
df <- df %>%
select('member_casual', everything())
df%>%group_by(member_casual)%>%
summarise(count = n())
df %>% count(member_casual)
ggplot(df, aes(member_casual, fill = member_casual))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User membersip types", x= "types of memebership")+
theme_classic()
#bind all the files in this path together
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
bike%>%group_by(member_casual)%>%
summarise(count = n())
#70% is unbalanced data set and this cut is more than that
bike$rideable_type <- factor(as.integer(factor(bike$rideable_type)))
bike$start_station_id <- factor(bike$start_station_id)
bike$end_station_id <- factor(bike$end_station_id)
# make it to casual = 0, member= 1
bike$member_casual<-factor(ifelse(bike$member_casual=='casual',0,1))
# split started_at/ ended_at to date column and time column
# change start_date/end_date to date type
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
# covert date to date type to get the time differnce
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
bike$Total_Time <- round(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")),2)
# take only the day from the date
bike$start_date <- as.Date(bike$started_at)
bike$days <- factor(format(bike$start_date, format = "%a"))
# Check the structure again
str(bike)
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
str(bike)
#one hot encoding of days
# bike <-bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
#selecting the columns we want
want <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm', 'days')
df2 <- bike[,(names(bike) %in% want)]
#Delete the na
df<-na.omit(df2)
#make member_casual to be the first column
colnames(df)
df <- df %>%
select('member_casual', everything())
colnames(df)
df <- df %>%
select('member_casual', everything())
df%>%group_by(member_casual)%>%
summarise(count = n())
df %>% count(member_casual)
ggplot(df, aes(member_casual, fill = member_casual))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User membersip types", x= "types of memebership")+
theme_classic()
agesurvive = xtabs(~ member_casual + rideable_type, data = df)
chisq.test(agesurvive)
agesurvive2 = xtabs(~ member_casual + Total_Time, data = df)
chisq.test(agesurvive2)
agesurvive3 = xtabs(~ member_casual + start_station_id , data = df)
chisq.test(agesurvive3)
agesurvive4 = xtabs(~ member_casual + end_station_id , data = df)
chisq.test(agesurvive4)
agesurvive5 = xtabs(~ member_casual + startingm , data = df)
chisq.test(agesurvive5)
#scaleddf <- as.data.frame(scale(df[2:13], center = TRUE, scale = TRUE))
set.seed(321)
df_sample <- sample(2, nrow(df), replace=TRUE, prob=c(0.75, 0.25))
train_X <- df[df_sample==1, 1:7]
test_X <- df[df_sample==2, 1:7]
train_y <- df[df_sample==1, 1]
test_y <- df[df_sample==2, 1]
#scaleddf <- as.data.frame(scale(df[2:13], center = TRUE, scale = TRUE))
set.seed(321)
df_sample <- sample(2, nrow(df), replace=TRUE, prob=c(0.75, 0.25))
train_X <- df[df_sample==1, 1:7]
test_X <- df[df_sample==2, 1:7]
train_y <- df[df_sample==1, 1]
test_y <- df[df_sample==2, 1]
str(train_X)
str(train_y)
#scaleddf <- as.data.frame(scale(df[2:13], center = TRUE, scale = TRUE))
set.seed(321)
df_sample <- sample(2, nrow(df), replace=TRUE, prob=c(0.75, 0.25))
train_X <- df[df_sample==1, 2:7]
test_X <- df[df_sample==2, 2:7]
train_y <- df[df_sample==1, 1]
test_y <- df[df_sample==2, 1]
str(train_X)
#deleted start_station_id and Wed coz the model says it is not much predictable
customerLogit <- glm(train_y ~ end_station_id+Total_Time+rideable_type+ startingm*day, data = train_X, family = "binomial")
#deleted start_station_id and Wed coz the model says it is not much predictable
customerLogit <- glm(train_y ~ end_station_id+Total_Time+rideable_type+ startingm*days, data = train_X, family = "binomial")
summary(customerLogit)
knitr::opts_chunk$set(echo = TRUE)
library(purrr)   #to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
#bind all the files in this path together
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
