ggplot(bike, aes(days, fill = days))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "Number of users in the days of the week", x="Days of the week")+
theme_classic()
#get only the hour from the time
bike$hour <- NA
bike$hour <- hour(bike$started_at)
sum_hour <- bike %>%
group_by(hour) %>%
summarise(sum_hour = length(hour))
ggplot(sum_hour, aes(hour, sum_hour ))+
geom_line(color = "#8C6BB1", size = 1) +
geom_point(color = "#8C96C6", size = 2) +
scale_x_continuous(breaks=seq(0,23,1))+
labs(title="Use by hour", y = "")+
theme_classic()
sum_hour <- bike %>%
group_by(days, hour)%>% summarise(count = n())
ggplot(data = sum_hour, aes(x = hour, y = count,  color = days))+
geom_point() + geom_line(aes(group = 1))+
facet_grid(rows = vars(days))+
scale_color_manual(values=c("#BFD3E6", "#9EBCDA" ,"#8C96C6" ,"#8C6BB1", "#88419D", "#810F7C", "#4D004B"))+
labs(title= "Use by day and hour")+
scale_y_continuous(breaks=seq(0,130,50))+
scale_x_continuous(breaks=seq(0,23,1))+
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank()
)
#subset without the na
end_station <- subset(bike, (!is.na(bike[,11])) & (!is.na(bike[,12])))
library(ggmap)
register_google(key = )
#end station
bikemap <-ggmap(get_googlemap(center = c(lon = -82.99879, lat=	39.96118),
maptype = 'terrain',
color = "color",
zoom = 11))
#Load modified data with the pricing and distance
pric <- read.csv("202207-cogo-tripdata.csv")
price <- subset(pric,select=c(member_casual, Pricing, TimeDiff, rideable_type))
casual_price <- subset(price,member_casual == "casual")
round(summary(casual_price$Pricing),2)
ggplot(casual_price,aes(Pricing))+
geom_histogram(fill = "#8C6BB1", alpha=.5, bins = 30, na.rm = T)+
labs(title = "Casual customesr payments")+
theme_classic()
ggplot(casual_price, aes(rideable_type, Pricing))+
geom_boxplot(outlier.colour = "#810F7C", na.rm =T)+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
expand_limits(y = 2)+
labs(title = "Check the outliers comparaing to bike type", x = "")+
theme_classic()
narm_pr<-outlierKD2(casual_price, Pricing, histogram = T)
nprice <- nrow(price)
nrmprice <- nrow(narm_pr)
#the mode function
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
payment <- narm_pr%>%
group_by(rideable_type)%>%
summarise(sum_price = round(sum(Pricing),2),
mean_price = round(mean(Pricing),2),
mode_price = getmode(Pricing))
xkabledply(payment)
install.packages("rmdformats")
library(rmdformats)
knitr::opts_chunk$set(echo = TRUE)
bike <- data.frame(read.csv("bo.csv"))
bike$rideable_type <- factor(bike$rideable_type)
bike$member_casual <- factor(bike$member_casual)
# split started_at/ ended_at to date column and time column
# change start_date/end_date to date type
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$Total_Time <- round(as.numeric(difftime(bike$end_time, bike$start_time, units = "mins")),2)
bike <- data.frame(read.csv("bo.csv"))
bike$rideable_type <- factor(bike$rideable_type)
bike$member_casual <- factor(bike$member_casual)
# split started_at/ ended_at to date column and time column
# change start_date/end_date to date type
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
bike$Total_Time <- round(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")),2)
delete?
drop <- c('Startedat', 'enddat', 'started_at', 'ended_at')
drop <- c('Startedat','enddat','started_at','ended_at')
df <- bike[,!(names(bike) %in% drop)]
drop <- c('Startedat','enddat','started_at','ended_at', 'start_station_name', 'end_station_name', 'start_lat', 'end_lat', 'start_lng','end_lng')
df <- bike[,!(names(bike) %in% drop)]
agesurvive = xtabs(~ member_casual + rideable_type, data = df)
chisq.test(agesurvive)
#find the most influnsing factors
agesurvive2 = xtabs(~ member_casual + Total_Time, data = df)
chisq.test(agesurvive2)
pairs(df)
#find the most influnsing factors
agesurvive3 = xtabs(~ member_casual + start_station_id + end_station_id, data = df)
chisq.test(agesurvive3)
agesurvive3 = xtabs(~ member_casual + start_station_id + end_station_id, data = df)
chisq.test(agesurvive3)
#find the most influnsing factors
agesurvive3 = xtabs(~ member_casual + start_station_id , data = df)
chisq.test(agesurvive3)
#find the most influnsing factors
agesurvive4 = xtabs(~ member_casual + end_station_id , data = df)
chisq.test(agesurvive4)
bike <- list.files(pattern='*.csv')
bike <- list.files(pattern='*.csv')
bike$rideable_type <- factor(bike$rideable_type)
file.list <- list.files(pattern='*.csv')
sprice <-map_df(file.list)
library(purrr)#to join all files
sprice <-map_df(file.list)
file.list <- list.files(pattern='*.xlsx')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
sprice <-map_df(file.list, function(x) read_excel(x), .id = "month")
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
sprice <-map_df(file.list, function(x) read_excel(x), .id = "month")
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
sprice <-map_df(file.list, function(x) read.csv(x), .id = "month")
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
sprice <-map_df(file.list, function(x) read.csv(x))
#bike <- data.frame(read.csv("bo.csv"))
bike$rideable_type <- factor(bike$rideable_type)
View(sprice)
bike <- read.csv("bo.csv")
bike <- read.csv("bo3.csv")
str(bike)
str(bike)
bike$rideable_type <- factor(bike$rideable_type)
bike$member_casual <- factor(bike$member_casual)
#bind all the files in this path together
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
#bike <- data.frame(read.csv("bo.csv"))
bike$rideable_type <- factor(bike$rideable_type)
bike$member_casual <- factor(bike$member_casual)
# split started_at/ ended_at to date column and time column
# change start_date/end_date to date type
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
bike$Total_Time <- round(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")),2)
#take the day to another column and delete the year and month
drop <- c('Startedat','enddat','started_at','ended_at', 'start_station_name', 'end_station_name', 'start_lat', 'end_lat', 'start_lng','end_lng')
df <- bike[,!(names(bike) %in% drop)]
agesurvive = xtabs(~ member_casual + rideable_type, data = df)
chisq.test(agesurvive)
agesurvive2 = xtabs(~ member_casual + Total_Time, data = df)
chisq.test(agesurvive2)
agesurvive3 = xtabs(~ member_casual + start_station_id , data = df)
chisq.test(agesurvive3)
agesurvive4 = xtabs(~ member_casual + end_station_id , data = df)
chisq.test(agesurvive4)
admitLogit <- glm(member_casual + end_station_id+start_station_id+Total_Time+rideable_type, data = bike, family = "binomial")
admitLogit <- glm(member_casual + end_station_id+start_station_id+Total_Time+rideable_type, data = df, family = "binomial")
admitLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type, data = df, family = "binomial")
summary(admitLogit)
admitLogit <- glm(member_casual ~ end_station_id+Total_Time+rideable_type, data = df, family = "binomial")
summary(admitLogit)
admitLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type, data = df, family = "binomial")
summary(admitLogit)
knitr::opts_chunk$set(echo = TRUE)
library(purrr)#to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
#bind all the files in this path together
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
#bike <- data.frame(read.csv("bo.csv"))
bike$rideable_type <- factor(bike$rideable_type)
bike$member_casual <- factor(bike$member_casual)
# split started_at/ ended_at to date column and time column
# change start_date/end_date to date type
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
bike$Total_Time <- round(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")),2)
#take the day to another column and delete the year and month
# make a plot to check if there is relationship between the days and the number of casual or members
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
bike$days <- format(bike$start_date, format = "%a")
bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
library(dplyr)
library(tidyr)
bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
#selecting the columns we want
want <- c('member_casual', 'rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
#Delete the na
df<-na.omit(df2)
#selecting the columns we want
want <- c('member_casual', 'rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
#Delete the na
df<-na.omit(df2)
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
want <- c('member_casual', 'rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
df<-na.omit(df2)
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
bike <-bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
#selecting the columns we want
want <- c('member_casual', 'rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
#Delete the na
df<-na.omit(df2)
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
summary(customerLogit)
prob=predict(customerLogit, type = "response" )
df$prob=prob
e <- roc(member_casual~prob, data=df)
auc(e) # area-under-curve
plot(e)
want <- c('member_casual', 'rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type')
df2 <- bike[,(names(bike) %in% want)]
df<-na.omit(df2)
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm, data = df, family = "binomial")
summary(customerLogit)
prob=predict(customerLogit, type = "response" )
df$prob=prob
e <- roc(member_casual~prob, data=df)
auc(e) # area-under-curve
plot(e)
knitr::opts_chunk$set(echo = TRUE)
library(purrr)#to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
#bind all the files in this path together
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
#bike <- data.frame(read.csv("bo.csv"))
bike$rideable_type <- factor(bike$rideable_type)
bike$member_casual <- factor(bike$member_casual)
# split started_at/ ended_at to date column and time column
# change start_date/end_date to date type
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
bike$Total_Time <- round(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")),2)
bike$days <- format(bike$start_date, format = "%a")
#take the day to another column and delete the year and month
# make a plot to check if there is relationship between the days and the number of casual or members
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
#one hot incoding of days
bike <-bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
#selecting the columns we want
want <- c('member_casual', 'rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
#Delete the na
df<-na.omit(df2)
agesurvive = xtabs(~ member_casual + rideable_type, data = df)
chisq.test(agesurvive)
agesurvive2 = xtabs(~ member_casual + Total_Time, data = df)
chisq.test(agesurvive2)
agesurvive3 = xtabs(~ member_casual + start_station_id , data = df)
chisq.test(agesurvive3)
agesurvive4 = xtabs(~ member_casual + end_station_id , data = df)
chisq.test(agesurvive4)
agesurvive5 = xtabs(~ member_casual + startingm , data = df)
chisq.test(agesurvive5)
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
summary(customerLogit)
prob=predict(customerLogit, type = "response" )
df$prob=prob
e <- roc(member_casual~prob, data=df)
auc(e) # area-under-curve
plot(e)
confusionMatrix(actual=customerLogit$y,predicted=customerLogit$fitted.values)
#make a graph to see how many members and casuales you have.
#Can we o interaction?
customerLogit <- glm(member_casual ~ end_station_id:start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
summary(customerLogit)
#Can we o interaction?
customerLogit <- glm(member_casual ~ end_station_id:start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
summary(customerLogit)
#Can we o interaction?
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm+Fri+Mon+Sat+Sun+Thu+Tue+Wed, data = df, family = "binomial")
summary(customerLogit)
#Can we o interaction?
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm:(Fri+Mon+Sat+Sun+Thu+Tue+Wed), data = df, family = "binomial")
summary(customerLogit)
prob=predict(customerLogit, type = "response" )
df$prob=prob
e <- roc(member_casual~prob, data=df)
auc(e) # area-under-curve
plot(e)
confusionMatrix(actual=customerLogit$y,predicted=customerLogit$fitted.values)
#make a graph to see how many members and casuales you have.
df1<-na.omit(df2)
df <- scale(df1)
df2$member_casual <- as.numeric(df2$member_casual)
df1<-na.omit(df2)
df <- scale(df1)
str(df1)
df2$rideable_type <- as.numeric(df2$rideable_type)
df1<-na.omit(df2)
df <- scale(df1)
scaled.dat <- scale(df1)
colMeans(scaled.dat)
apply(scaled.dat, 2, sd)
df<-na.omit(df2)
data.Normalization (df,type="n1",normalization="column")
install.packages("clusterSim")
library(clusterSim)
data.Normalization (df,type="n1",normalization="column")
want <- c('rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
df2$member_casual <- as.numeric(df2$member_casual)
df2$rideable_type <- as.numeric(df2$rideable_type)
data.Normalization (df,type="n1",normalization="column")
df1$rideable_type <- as.numeric(df1$rideable_type)
df <- data.Normalization (df1,type="n1",normalization="column")
df$member_casual <- df1$member_casual
str(df)
bike$member_casual <- factor(bike$member_casual)
#selecting the columns we want
want <- c('rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
df1<-na.omit(df2)#Delete the na
#preparing columns to numerical to normalize the scale
df1$rideable_type <- as.numeric(df1$rideable_type)
df <- data.Normalization (df1,type="n1",normalization="column")
# add the casual_member column
df$member_casual <- df1$member_casual
str(df)
df<- select(df1,member_casual)
df <- df1$member_casual
#selecting the columns we want
want <- c('rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
df1<-na.omit(df2)#Delete the na
#preparing columns to numerical to normalize the scale
df1$rideable_type <- as.numeric(df1$rideable_type)
df <- data.Normalization (df1,type="n1",normalization="column")
# add the casual_member column
df <- c(df1$member_casual)
str(df)
df <- data.Normalization (df1,type="n1",normalization="column")
str(df)
df["member_casual"] <- df1["member_casual"]
df["member_casuals"] <- df1["member_casual"]
df["member_casual"] <- df1["member_casual",]
str(df)
df["member_casual"] <- bike["member_casual",]
str(df)
knitr::opts_chunk$set(echo = TRUE)
library(purrr)#to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
#bind all the files in this path together
file.list <- list.files(pattern='*.csv')
# need an id-column with the file-names
file.list <- setNames(file.list, file.list)
#want only sheet 4, skip 1 row and name id column month
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
#bike <- data.frame(read.csv("bo.csv"))
bike$rideable_type <- factor(bike$rideable_type)
bike$member_casual <- factor(bike$member_casual)
# split started_at/ ended_at to date column and time column
# change start_date/end_date to date type
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
bike$Total_Time <- round(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")),2)
bike$days <- format(bike$start_date, format = "%a")
#take the day to another column and delete the year and month
# make a plot to check if there is relationship between the days and the number of casual or members
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
#one hot incoding of days
bike <-bike %>% mutate(value = 1)  %>% spread(days, value,  fill = 0 )
want <- c('rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
df1<-na.omit(df2)#Delete the na
want <- c('rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed', 'casual_memver')
df<- bike[,(names(bike) %in% want)]
want <- c('rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
df2 <- bike[,(names(bike) %in% want)]
df1<-na.omit(df2)
df1$rideable_type <- as.numeric(df1$rideable_type)
df <- data.Normalization (df1,type="n1",normalization="column")
library(clusterSim)
knitr::opts_chunk$set(echo = TRUE)
library(purrr)#to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(clusterSim)#for scale normalization
df <- data.Normalization (df1,type="n1",normalization="column")
df$casual_member<-df1[,df$casual_member]
str(df)
df$casual_member<-df$casual_member
str(df)
df$casual_member<-df1$casual_member
str(df)
df$casual_member<-df1[,df1$casual_member]
str(df)
df$casual_member<-df1[:,df1$casual_member]
df$member_casual<- df1$member_casual
str(df)
df$member_casual<- bike$member_casual
df1<-na.omit(bike)#Delete the na
#selecting the columns we want
want <- c('rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','rideable_type', 'Fri','Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')
'casual_member'
df2 <- df1[,(names(df1) %in% want)]
#preparing columns to numerical to normalize the scale
df2$rideable_type <- as.numeric(df2$rideable_type)
df <- data.Normalization (df2,type="n1",normalization="column")
# add the casual_member column
df$member_casual<- bike$member_casual
df$member_casual<- df1$member_casual
str(df)
agesurvive = xtabs(~ member_casual + rideable_type, data = df)
chisq.test(agesurvive)
agesurvive2 = xtabs(~ member_casual + Total_Time, data = df)
chisq.test(agesurvive2)
#Can we o interaction?
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time+rideable_type+ startingm:(Fri+Mon+Sat+Sun+Thu+Tue+Wed), data = df, family = "binomial")
summary(customerLogit)
prob=predict(customerLogit, type = "response" )
df$prob=prob
e <- roc(member_casual~prob, data=df)
auc(e) # area-under-curve
plot(e)
confusionMatrix(actual=customerLogit$y,predicted=customerLogit$fitted.values)
#make a graph to see how many members and casuales you have.
knitr::opts_chunk$set(echo = TRUE)
library(purrr)#to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
customerLogit <- glm(member_casual ~ end_station_id+start_station_id+Total_Time:rideable_type+ startingm:(Fri+Mon+Sat+Sun+Thu+Tue+Wed), data = df, family = "binomial")
summary(customerLogit)
prob=predict(customerLogit, type = "response" )
df$prob=prob
e <- roc(member_casual~prob, data=df)
auc(e) # area-under-curve
plot(e)
customerLogit <- glm(member_casual ~ end_station_id:start_station_id+Total_Time+rideable_type+ startingm:(Fri+Mon+Sat+Sun+Thu+Tue+Wed), data = df, family = "binomial")
summary(customerLogit)
prob=predict(customerLogit, type = "response" )
df$prob=prob
e <- roc(member_casual~prob, data=df)
auc(e) # area-under-curve
plot(e)
