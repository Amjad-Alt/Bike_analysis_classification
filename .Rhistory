knn_crosst <- gmodels::CrossTable(DF_Rt_test_y, train = knn_pred, prop.chisq = FALSE)
print( paste("k = ", kval) )
knn_crosst
library(caret)
cm <- confusionMatrix(knn_pred, reference = as.factor(DF_Rt_test_y))
cmaccu = cm$overall['Accuracy']
print( paste("Total Accuracy = ", cmaccu ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
print(data.frame(cm$byClass), title=paste("k = ",kval))
for (kval in 4:11) {
knn_pred <- knn(train = DF_Rt_train_X, test = DF_Rt_test_X, cl=DF_Rt_train_y, k=kval)
knn_crosst <- CrossTable(DF_Rt_test_y, knn_pred, prop.chisq = FALSE)
print( paste("k = ", kval) )
knn_crosst
#
cm = confusionMatrix(knn_pred, reference = as.factor(DF_Rt_test_y))
cmaccu = cm$overall['Accuracy']
print( paste("Total Accuracy = ", cmaccu ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
print(data.frame(cm$byClass), title=paste("k = ",kval))
}
print(ResultDf)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE)
library(purrr)   #to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(ezids)
library(class)
library(gmodels)
library(FNN)
#binding all the files in this path together
file.list <- list.files(pattern='*.csv')
file.list <- setNames(file.list, file.list)
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
colnames(bike)
#Plot
bike %>% count(rideable_type)
ggplot(bike, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
#Remove docked bikes and summary
bike <-subset(bike, rideable_type != "docked_bike")
#Plot
bike %>% count(rideable_type)
ggplot(bike, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
bike$rideable_type <- factor(ifelse(bike$rideable_type=="classic_bike",0,1))
bike$start_station_id <- factor(bike$start_station_id)
bike$end_station_id <- factor(bike$end_station_id)
bike$member_casual<-factor(ifelse(bike$member_casual=='casual',0,1))
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
#Converting time in minutes
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
res <- hm(bike$end_time)# format to 'hours:minutes'
bike$endingm <- hour(res)*60 + minute(res)
str(bike)
# Fixing the date format to get the time difference
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
#Calculating the time difference
bike$Total_Time <- abs(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")))
#days
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$days <- factor(format(bike$start_date, format = "%a"))
#Time-range
# Extract the 'Hours' only first, then change it to numeric variable
bike$start_hour <- format(as.POSIXct(bike$started_at), format = "%H")
bike$start_hour <- as.numeric(bike$start_hour)
# Use 'summary(bike$start_hour_num)' to check if the min and max are 0 and 23
# Divide the time into different categories/intervals
bike$Time_range <- cut(bike$start_hour, c(0, 6, 12, 18, 23), c("Before dawn", "Morning", "Afternoon", "Night"), include.lowest=TRUE)
#0am-6am : Morning (Factor 1)
#6am-12pm : Morning (Factor 2)
#12pm-18pm : Afternoon (Factor 3)
#6pm-0am : Night (Factor 4)
str(bike)
#selecting the features needed for the model
selected_features <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','endingm','days', 'start_hour', 'Time_range')
bike2 <- bike[,(names(bike) %in% selected_features)]
str(bike2)
#Removing NA values
bike2<-na.omit(bike2)
#Removing outliers from Total_Time
#bike2 <- outlierKD2(bike2, Total_Time, rm=T, boxplt = TRUE, qqplt = TRUE)
#print('Summary Statistic for Total time')
##summary(bike2)
#Copying data for the model
df_knn <- data.frame(bike2)
print(head(df_knn))
#selecting the features needed for the model
selected_features <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','endingm')
df_rt_knn <- df_knn[,(names(df_knn) %in% selected_features)]
#df_rt_knn <- as.data.frame(df_knn[-c(7)])
df_rt_knn$rideable_type <- as.numeric(df_knn$rideable_type)
df_rt_knn$Total_Time <- as.numeric(df_knn$Total_Time)
df_rt_knn$member_casual <- as.numeric(df_knn$member_casual)
df_rt_knn$start_station_id <- as.numeric(df_knn$start_station_id)
df_rt_knn$end_station_id <- as.numeric(df_knn$end_station_id)
df_rt_knn$startingm <- as.numeric(df_knn$startingm)
df_rt_knn$endingm <- as.numeric(df_knn$endingm)
print(str(df_rt_knn))
scaleddf <- as.data.frame(scale(df_rt_knn[2:6], center = TRUE, scale = TRUE))
set.seed(333)
df_sample_rt <- sample(2, nrow(df_rt_knn), replace=TRUE, prob=c(0.75, 0.25))
DF_Rt_train_X <- df_rt_knn[df_sample_rt==1, 2:6]
DF_Rt_test_X <- df_rt_knn[df_sample_rt==2, 2:6]
DF_Rt_train_y <- df_rt_knn[df_sample_rt==1, 1]
DF_Rt_test_y <- df_rt_knn[df_sample_rt==2, 1]
print("Training data")
print(head(DF_Rt_train_X))
knn1 <- knn(train=DF_Rt_train_X, test=DF_Rt_test_X, cl=DF_Rt_train_y, k=3)
print(summary(knn1))
# create an empty dataframe to store the results from confusion matrices
ResultDf = data.frame( k=numeric(0), Total.Accuracy= numeric(0), row.names = NULL )
kval = 3
knn_pred <- knn(train = DF_Rt_train_X, test = DF_Rt_test_X, cl=DF_Rt_train_y, k=kval)
knn_crosst <- gmodels::CrossTable(DF_Rt_test_y, train = knn_pred, prop.chisq = FALSE)
print( paste("k = ", kval) )
knn_crosst
library(caret)
cm <- confusionMatrix(knn_pred, reference = as.factor(DF_Rt_test_y))
cmaccu = cm$overall['Accuracy']
print( paste("Total Accuracy = ", cmaccu ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
print(data.frame(cm$byClass), title=paste("k = ",kval))
for (kval in 4:11) {
knn_pred <- knn(train = DF_Rt_train_X, test = DF_Rt_test_X, cl=DF_Rt_train_y, k=kval)
knn_crosst <- CrossTable(DF_Rt_test_y, knn_pred, prop.chisq = FALSE)
print( paste("k = ", kval) )
knn_crosst
#
cm = confusionMatrix(knn_pred, reference = as.factor(DF_Rt_test_y))
cmaccu = cm$overall['Accuracy']
print( paste("Total Accuracy = ", cmaccu ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
print(data.frame(cm$byClass), title=paste("k = ",kval))
}
print(ResultDf)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE)
library(purrr)   #to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(ezids)
library(class)
library(gmodels)
library(FNN)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE)
library(purrr)   #to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(ezids)
library(class)
library(gmodels)
library(FNN)
#binding all the files in this path together
file.list <- list.files(pattern='*.csv')
file.list <- setNames(file.list, file.list)
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
colnames(bike)
#Plot
bike %>% count(rideable_type)
ggplot(bike, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
#Remove docked bikes and summary
bike <-subset(bike, rideable_type != "docked_bike")
#Plot
bike %>% count(rideable_type)
ggplot(bike, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
bike$rideable_type <- factor(ifelse(bike$rideable_type=="classic_bike",0,1))
bike$start_station_id <- factor(bike$start_station_id)
bike$end_station_id <- factor(bike$end_station_id)
bike$member_casual<-factor(ifelse(bike$member_casual=='casual',0,1))
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
#Converting time in minutes
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
res <- hm(bike$end_time)# format to 'hours:minutes'
bike$endingm <- hour(res)*60 + minute(res)
str(bike)
# Fixing the date format to get the time difference
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
#Calculating the time difference
bike$Total_Time <- abs(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")))
#days
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$days <- factor(format(bike$start_date, format = "%a"))
#Time-range
# Extract the 'Hours' only first, then change it to numeric variable
bike$start_hour <- format(as.POSIXct(bike$started_at), format = "%H")
bike$start_hour <- as.numeric(bike$start_hour)
# Use 'summary(bike$start_hour_num)' to check if the min and max are 0 and 23
# Divide the time into different categories/intervals
bike$Time_range <- cut(bike$start_hour, c(0, 6, 12, 18, 23), c("Before dawn", "Morning", "Afternoon", "Night"), include.lowest=TRUE)
#0am-6am : Morning (Factor 1)
#6am-12pm : Morning (Factor 2)
#12pm-18pm : Afternoon (Factor 3)
#6pm-0am : Night (Factor 4)
str(bike)
#selecting the features needed for the model
selected_features <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','endingm','days', 'start_hour', 'Time_range')
bike2 <- bike[,(names(bike) %in% selected_features)]
str(bike2)
#Removing NA values
bike2<-na.omit(bike2)
#Removing outliers from Total_Time
bike2 <- outlierKD2(bike2, Total_Time, rm=T, boxplt = TRUE, qqplt = TRUE)
print('Summary Statistic for Total time')
summary(bike2)
bike_lm <- data.frame(bike2)
bike_lm1 <- lm(formula = Total_Time ~ start_hour+rideable_type+member_casual+days, data=bike_lm)
summary(bike_lm1)
plot(bike_lm1)
library(car)
vif(bike_lm1)
# Double check the Total_Time distribution
ggplot(data=bike_lm, mapping = aes(Total_Time))+geom_histogram(col='red', fill='blue')+labs(title='Histogram for total riding time')
library(ezids)
bike_clean <- outlierKD2 (bike_lm, Total_Time, rm=T, boxplt = TRUE, qqplt = TRUE)
print('Summary Statistic for cleaned membership time')
summary(bike_lm$Total_Time)
# Double check the distribution
# ggplot(data=bike_clean, mapping = aes(Total_Time))+geom_histogram(col='red', fill='blue')+labs(title='Histogram for total riding time')
bike_lm2 <- lm(formula = Total_Time ~ (start_hour+rideable_type+member_casual+days)^2, data=bike_clean)
summary(bike_lm2)
plot(bike_lm2)
library(ggplot2)
qplot (x=start_hour, y=Total_Time, data=bike_lm, xlab='Start_hour', ylab='Total_time', main='scatter-plot Total_Time vs start_hour (General)')
#Copying data for the model
bike_RT_LR <- data.frame(bike2)
#making rideable_type the first column
colnames(bike_RT_LR)
bike_RT_LR <- bike_RT_LR %>%
select('rideable_type', everything())
print(head(bike_RT_LR))
# Checking for unbalanced data
bike_RT_LR%>%group_by(rideable_type)%>%
summarise(count = n())
bike_RT_LR %>% count(rideable_type)
ggplot(bike_RT_LR, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
#Test and train split
set.seed(333)
bike_RT_LR_sample <- sample(2, nrow(bike_RT_LR), replace=TRUE, prob=c(0.75, 0.25))
bike_RT_LR_train_X <- bike_RT_LR[bike_RT_LR_sample==1, 2:8]
bike_RT_LR_test_X <- bike_RT_LR[bike_RT_LR_sample==2, 2:8]
bike_RT_LR_train_Y <- bike_RT_LR[bike_RT_LR_sample==1, 1]
bike_RT_LR_test_Y <- bike_RT_LR[bike_RT_LR_sample==2, 1]
print("Training data")
print(head(bike_RT_LR_train_X))
# Logistic model
Bike_Type_Logit <- glm(bike_RT_LR_train_Y ~ start_station_id+ end_station_id+Total_Time*member_casual+ startingm*days +endingm , data = bike_RT_LR_train_X, family = "binomial")
summary(head(Bike_Type_Logit))
#Test and train split
set.seed(333)
bike_RT_LR_sample <- sample(2, nrow(bike_RT_LR), replace=TRUE, prob=c(0.75, 0.25))
bike_RT_LR_train_X <- bike_RT_LR[bike_RT_LR_sample==1, 2:8]
bike_RT_LR_test_X <- bike_RT_LR[bike_RT_LR_sample==2, 2:8]
bike_RT_LR_train_Y <- bike_RT_LR[bike_RT_LR_sample==1, 1]
bike_RT_LR_test_Y <- bike_RT_LR[bike_RT_LR_sample==2, 1]
print("Training data", head(bike_RT_LR_train_X))
#Test and train split
set.seed(333)
bike_RT_LR_sample <- sample(2, nrow(bike_RT_LR), replace=TRUE, prob=c(0.75, 0.25))
bike_RT_LR_train_X <- bike_RT_LR[bike_RT_LR_sample==1, 2:8]
bike_RT_LR_test_X <- bike_RT_LR[bike_RT_LR_sample==2, 2:8]
bike_RT_LR_train_Y <- bike_RT_LR[bike_RT_LR_sample==1, 1]
bike_RT_LR_test_Y <- bike_RT_LR[bike_RT_LR_sample==2, 1]
print0("Training data", head(bike_RT_LR_train_X))
#Test and train split
set.seed(333)
bike_RT_LR_sample <- sample(2, nrow(bike_RT_LR), replace=TRUE, prob=c(0.75, 0.25))
bike_RT_LR_train_X <- bike_RT_LR[bike_RT_LR_sample==1, 2:8]
bike_RT_LR_test_X <- bike_RT_LR[bike_RT_LR_sample==2, 2:8]
bike_RT_LR_train_Y <- bike_RT_LR[bike_RT_LR_sample==1, 1]
bike_RT_LR_test_Y <- bike_RT_LR[bike_RT_LR_sample==2, 1]
print("Training data")
print(head(bike_RT_LR_train_X))
# Logistic model
Bike_Type_Logit <- glm(bike_RT_LR_train_Y ~ start_station_id+ end_station_id+Total_Time*member_casual+ startingm*days +endingm , data = bike_RT_LR_train_X, family = "binomial")
summary(head(Bike_Type_Logit))
# Logistic model
Bike_Type_Logit <- glm(bike_RT_LR_train_Y ~ start_station_id+ end_station_id+Total_Time*member_casual+ startingm*days +endingm , data = bike_RT_LR_train_X, family = "binomial")
summary(Bike_Type_Logit)
pchisq(30048-22143, 28324-21948, lower.tail=F)
prob=predict(Bike_Type_Logit, type = "response")
a <- roc(bike_RT_LR_train_Y~prob)
proc=predict(Bike_Type_Logit, type = "response", newdata = bike_RT_LR_test_X)
bike_RT_LR_test_X$proc=proc
b <- roc(bike_RT_LR_test_Y~proc)
print(b)
plot(b)
knitr::opts_chunk$set(echo = TRUE)
library(purrr)   #to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(ezids)
library(class)
library(gmodels)
library(FNN)
library(car)
#binding all the files in this path together
file.list <- list.files(pattern='*.csv')
file.list <- setNames(file.list, file.list)
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
colnames(bike)
bike%>%group_by(rideable_type)%>%
summarise(count = n())
# Logistic model
Bike_Type_Logit <- glm(bike_RT_LR_train_Y ~ start_station_id+ end_station_id+Total_Time*member_casual+ startingm*days +endingm , data = bike_RT_LR_train_X, family = "binomial")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE)
library(purrr)   #to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(ezids)
library(class)
library(gmodels)
library(FNN)
#binding all the files in this path together
file.list <- list.files(pattern='*.csv')
file.list <- setNames(file.list, file.list)
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
colnames(bike)
#Plot
bike %>% count(rideable_type)
ggplot(bike, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
#Remove docked bikes and summary
bike <-subset(bike, rideable_type != "docked_bike")
#Plot
bike %>% count(rideable_type)
ggplot(bike, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
bike$rideable_type <- factor(ifelse(bike$rideable_type=="classic_bike",0,1))
bike$start_station_id <- factor(bike$start_station_id)
bike$end_station_id <- factor(bike$end_station_id)
bike$member_casual<-factor(ifelse(bike$member_casual=='casual',0,1))
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
#Converting time in minutes
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
res <- hm(bike$end_time)# format to 'hours:minutes'
bike$endingm <- hour(res)*60 + minute(res)
str(bike)
# Fixing the date format to get the time difference
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
#Calculating the time difference
bike$Total_Time <- abs(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")))
#days
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$days <- factor(format(bike$start_date, format = "%a"))
#Time-range
# Extract the 'Hours' only first, then change it to numeric variable
bike$start_hour <- format(as.POSIXct(bike$started_at), format = "%H")
bike$start_hour <- as.numeric(bike$start_hour)
# Use 'summary(bike$start_hour_num)' to check if the min and max are 0 and 23
# Divide the time into different categories/intervals
bike$Time_range <- cut(bike$start_hour, c(0, 6, 12, 18, 23), c("Before dawn", "Morning", "Afternoon", "Night"), include.lowest=TRUE)
#0am-6am : Morning (Factor 1)
#6am-12pm : Morning (Factor 2)
#12pm-18pm : Afternoon (Factor 3)
#6pm-0am : Night (Factor 4)
str(bike)
#selecting the features needed for the model
selected_features <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','endingm','days', 'start_hour', 'Time_range')
bike2 <- bike[,(names(bike) %in% selected_features)]
str(bike2)
#Removing NA values
bike2<-na.omit(bike2)
#Removing outliers from Total_Time
bike2 <- outlierKD2(bike2, Total_Time, rm=T, boxplt = TRUE, qqplt = TRUE)
print('Summary Statistic for Total time')
summary(bike2)
#Copying data for the model
bike_RT_LR <- data.frame(bike2)
#making rideable_type the first column
colnames(bike_RT_LR)
bike_RT_LR <- bike_RT_LR %>%
select('rideable_type', everything())
print(head(bike_RT_LR))
# Checking for unbalanced data
bike_RT_LR%>%group_by(rideable_type)%>%
summarise(count = n())
bike_RT_LR %>% count(rideable_type)
ggplot(bike_RT_LR, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
#Test and train split
set.seed(333)
bike_RT_LR_sample <- sample(2, nrow(bike_RT_LR), replace=TRUE, prob=c(0.75, 0.25))
bike_RT_LR_train_X <- bike_RT_LR[bike_RT_LR_sample==1, 2:8]
bike_RT_LR_test_X <- bike_RT_LR[bike_RT_LR_sample==2, 2:8]
bike_RT_LR_train_Y <- bike_RT_LR[bike_RT_LR_sample==1, 1]
bike_RT_LR_test_Y <- bike_RT_LR[bike_RT_LR_sample==2, 1]
print("Training data")
print(head(bike_RT_LR_train_X))
# Logistic model
Bike_Type_Logit <- glm(bike_RT_LR_train_Y ~ start_station_id+ end_station_id+Total_Time*member_casual+ startingm*days +endingm , data = bike_RT_LR_train_X, family = "binomial")
summary(Bike_Type_Logit)
pchisq(30048-22143, 28324-21948, lower.tail=F)
prob=predict(Bike_Type_Logit, type = "response")
a <- roc(bike_RT_LR_train_Y~prob)
proc=predict(Bike_Type_Logit, type = "response", newdata = bike_RT_LR_test_X)
bike_RT_LR_test_X$proc=proc
b <- roc(bike_RT_LR_test_Y~proc)
print(b)
plot(b)
prob=predict(Bike_Type_Logit, type = "response")
bike_RT_LR_test_Y$proc=proc
a <- roc(bike_RT_LR_train_Y~prob)
prob=predict(Bike_Type_Logit, type = "response")
bike_RT_LR_test_Y$prob=prob
a <- roc(bike_RT_LR_train_Y~prob)
prob=predict(Bike_Type_Logit, type = "response")
bike_RT_LR_train_Y$prob=prob
a <- roc(bike_RT_LR_train_Y~prob)
prob=predict(Bike_Type_Logit, type = "response")
bike_RT_LR_train_Y$prob=prob
a <- roc(bike_RT_LR_train_Y~prob)
logitpredict.4 <- predict(Bike_Type_Logit, newdata = bike_RT_LR_test_X, type = "response") > 0.4
defult2 <- ifelse(logitpredict.4 =="TRUE", 1, 0)
crossTable4 = table(bike_RT_LR_test_Y,defult2)
proc=predict(Bike_Type_Logit, type = "response", newdata = bike_RT_LR_test_X)
bike_RT_LR_test_X$proc=proc
b <- roc(bike_RT_LR_test_Y~proc)
pchisq(30048-22143, 28324-21948, lower.tail=F)
prob=predict(Bike_Type_Logit, type = "response")
bike_RT_LR_train_Y$prob=prob
a <- roc(bike_RT_LR_train_Y~prob)
proc=predict(Bike_Type_Logit, type = "response", newdata = bike_RT_LR_test_X)
bike_RT_LR_test_X$proc=proc
b <- roc(bike_RT_LR_test_Y~proc)
