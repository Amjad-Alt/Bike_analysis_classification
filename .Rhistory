#selecting the features needed for the model
selected_features <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id')
df_rt_knn <- df_knn[,(names(df_knn) %in% selected_features)]
knitr::opts_chunk$set(echo = TRUE)
library(purrr)   #to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(ezids)
library(class)
library(gmodels)
library(FNN)
#binding all the files in this path together
file.list <- list.files(pattern='*.csv')
file.list <- setNames(file.list, file.list)
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
colnames(bike)
bike%>%group_by(rideable_type)%>%
summarise(count = n())
#Remove docked bikes
bike <-subset(bike, rideable_type != "docked_bike")
bike%>%group_by(rideable_type)%>%
summarise(count = n())
bike$rideable_type <- factor(ifelse(bike$rideable_type=="classic_bike",0,1))
bike$start_station_id <- factor(bike$start_station_id)
bike$end_station_id <- factor(bike$end_station_id)
bike$member_casual<-factor(ifelse(bike$member_casual=='casual',0,1))
# Formatting started_at and ended_at column to date and time column
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
# Fixing the date format to get the time difference
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
#Calculating the time difference
bike$Total_Time <- abs(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")))
#Extracting the day from the date
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$days <- factor(format(bike$start_date, format = "%a"))
#Converting time in minutes
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
res <- hm(bike$end_time)# format to 'hours:minutes'
bike$endingm <- hour(res)*60 + minute(res)
print(head(bike))
str(bike)
#selecting the features needed for the model
selected_features <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','endingm','days')
bike2 <- bike[,(names(bike) %in% selected_features)]
#Removing NA values
bike2<-na.omit(bike2)
str(bike2)
"chris's dataset name <- data.frame(bike2)
df_knn <- data.frame(bike2)
print(head(df_knn))
#selecting the features needed for the model
selected_features <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id')
df_rt_knn <- df_knn[,(names(df_knn) %in% selected_features)]
#df_rt_knn <- as.data.frame(df_knn[-c(7)])
df_rt_knn$rideable_type <- as.numeric(df_knn$rideable_type)
df_rt_knn$Total_Time <- as.numeric(df_knn$Total_Time)
df_rt_knn$member_casual <- as.numeric(df_knn$member_casual)
df_rt_knn$start_station_id <- as.numeric(df_knn$start_station_id)
df_rt_knn$end_station_id <- as.numeric(df_knn$end_station_id)
#df_rt_knn$startingm <- as.numeric(df_knn$startingm)
#df_rt_knn$endingm <- as.numeric(df_knn$endingm)
df_rt_knn$rideable_type <- replace(df_rt_knn$rideable_type ,df_rt_knn$rideable_type == 2, 0)
print(head(df_rt_knn))
scaleddf <- as.data.frame(scale(df_rt_knn[2:4], center = TRUE, scale = TRUE))
set.seed(333)
df_sample_rt <- sample(2, nrow(df_rt_knn), replace=TRUE, prob=c(0.75, 0.25))
DF_Rt_train_X <- df_rt_knn[df_sample_rt==1, 2:4]
DF_Rt_test_X <- df_rt_knn[df_sample_rt==2, 2:4]
DF_Rt_train_y <- df_rt_knn[df_sample_rt==1, 1]
DF_Rt_test_y <- df_rt_knn[df_sample_rt==2, 1]
knn1 <- knn(train=DF_Rt_train_X, test=DF_Rt_test_X, cl=DF_Rt_train_y, k=9)
knn_crosst <- gmodels::CrossTable(x = DF_Rt_test_y, y = knn1, prop.chisq = FALSE)
# create an empty dataframe to store the results from confusion matrices
ResultDf = data.frame( k=numeric(0), Total.Accuracy= numeric(0), row.names = NULL )
kval = 3
library(caret)
cm <- confusionMatrix(knn_pred, reference = as.factor(DF_Rt_test_y))
# create an empty dataframe to store the results from confusion matrices
ResultDf = data.frame( k=numeric(0), Total.Accuracy= numeric(0), row.names = NULL )
kval = 3
library(caret)
cm <- confusionMatrix(knn_pred, reference = as.factor(DF_Rt_test_y))
library(caret)
cm <- confusionMatrix(knn1, reference = as.factor(DF_Rt_test_y))
cmaccu = cm$overall['Accuracy']
print( paste("Total Accuracy = ", cmaccu ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
print(data.frame(cm$byClass), title=paste("k = ",kval))
for (kval in 4:11) {
knn_pred <- knn(train = DF_Rt_train_X, test = DF_Rt_test_X, cl=DF_Rt_train_y, k=kval)
knn_crosst <- CrossTable(DF_Rt_test_y, knn_pred, prop.chisq = FALSE)
print( paste("k = ", kval) )
knn_crosst
#
cm = confusionMatrix(knn_pred, reference = as.factor(DF_Rt_test_y))
cmaccu = cm$overall['Accuracy']
print( paste("Total Accuracy = ", cmaccu ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
print(data.frame(cm$byClass), title=paste("k = ",kval))
}
print(ResultDf, "Total Accuracy Summary")
ggplot(ResultDf,aes(x = k, y = Total.Accuracy)) +
geom_line(color = "orange", size = 1.5) +
geom_point(size = 3) +
labs(title = "accuracy vs k")
#Copying data for the model
df <- data.frame(bike2)
# delete outliers
df <- outlierKD2(df,Total_Time)
#making rideable_type the first column
colnames(df)
df <- df %>%
select('member_casual', everything())
knitr::opts_chunk$set(echo = TRUE)
library(purrr)   #to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(ezids)
library(class)
library(gmodels)
library(FNN)
#binding all the files in this path together
file.list <- list.files(pattern='*.csv')
file.list <- setNames(file.list, file.list)
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
colnames(bike)
bike%>%group_by(rideable_type)%>%
summarise(count = n())
#Remove docked bikes
bike <-subset(bike, rideable_type != "docked_bike")
bike%>%group_by(rideable_type)%>%
summarise(count = n())
bike$rideable_type <- factor(ifelse(bike$rideable_type=="classic_bike",0,1))
bike$start_station_id <- factor(bike$start_station_id)
bike$end_station_id <- factor(bike$end_station_id)
bike$member_casual<-factor(ifelse(bike$member_casual=='casual',0,1))
# Formatting started_at and ended_at column to date and time column
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
# Fixing the date format to get the time difference
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
#Calculating the time difference
bike$Total_Time <- abs(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")))
#Extracting the day from the date
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$days <- factor(format(bike$start_date, format = "%a"))
#Converting time in minutes
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
res <- hm(bike$end_time)# format to 'hours:minutes'
bike$endingm <- hour(res)*60 + minute(res)
print(head(bike))
str(bike)
#selecting the features needed for the model
selected_features <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','endingm','days')
bike2 <- bike[,(names(bike) %in% selected_features)]
#Removing NA values
bike2<-na.omit(bike2)
str(bike2)
#Copying data for the model
bike_RT_LR <- data.frame(bike2)
#df <- outlierKD2(df,Total_Time)
#making rideable_type the first column
colnames(bike_RT_LR)
bike_RT_LR <- bike_RT_LR %>%
select('rideable_type', everything())
bike_RT_LR%>%group_by(rideable_type)%>%
summarise(count = n())
bike_RT_LR %>% count(rideable_type)
ggplot(bike_RT_LR, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
#scaleddf <- as.data.frame(scale(df[2:13], center = TRUE, scale = TRUE))
set.seed(333)
bike_RT_LR_sample <- sample(2, nrow(bike_RT_LR), replace=TRUE, prob=c(0.75, 0.25))
bike_RT_LR_train_X <- bike_RT_LR[bike_RT_LR_sample==1, 2:8]
bike_RT_LR_test_X <- bike_RT_LR[bike_RT_LR_sample==2, 2:8]
bike_RT_LR_train_Y <- bike_RT_LR[bike_RT_LR_sample==1, 1]
bike_RT_LR_test_Y <- bike_RT_LR[bike_RT_LR_sample==2, 1]
str(bike_RT_LR_train_X)
df_knn <- data.frame(bike2)
print(head(df_knn))
#selecting the features needed for the model
selected_features <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id')
df_rt_knn <- df_knn[,(names(df_knn) %in% selected_features)]
#df_rt_knn <- as.data.frame(df_knn[-c(7)])
df_rt_knn$rideable_type <- as.numeric(df_knn$rideable_type)
df_rt_knn$Total_Time <- as.numeric(df_knn$Total_Time)
df_rt_knn$member_casual <- as.numeric(df_knn$member_casual)
df_rt_knn$start_station_id <- as.numeric(df_knn$start_station_id)
df_rt_knn$end_station_id <- as.numeric(df_knn$end_station_id)
#df_rt_knn$startingm <- as.numeric(df_knn$startingm)
#df_rt_knn$endingm <- as.numeric(df_knn$endingm)
df_rt_knn$rideable_type <- replace(df_rt_knn$rideable_type ,df_rt_knn$rideable_type == 2, 0)
print(head(df_rt_knn))
scaleddf <- as.data.frame(scale(df_rt_knn[2:4], center = TRUE, scale = TRUE))
set.seed(333)
df_sample_rt <- sample(2, nrow(df_rt_knn), replace=TRUE, prob=c(0.75, 0.25))
DF_Rt_train_X <- df_rt_knn[df_sample_rt==1, 2:4]
DF_Rt_test_X <- df_rt_knn[df_sample_rt==2, 2:4]
DF_Rt_train_y <- df_rt_knn[df_sample_rt==1, 1]
DF_Rt_test_y <- df_rt_knn[df_sample_rt==2, 1]
knn1 <- knn(train=DF_Rt_train_X, test=DF_Rt_test_X, cl=DF_Rt_train_y, k=9)
knn_crosst <- gmodels::CrossTable(x = DF_Rt_test_y, y = knn1, prop.chisq = FALSE)
knn1 <- knn(train=DF_Rt_train_X, test=DF_Rt_test_X, cl=DF_Rt_train_y, k=3)
knn_crosst <- gmodels::CrossTable(x = DF_Rt_test_y, y = knn1, prop.chisq = FALSE)
# create an empty dataframe to store the results from confusion matrices
ResultDf = data.frame( k=numeric(0), Total.Accuracy= numeric(0), row.names = NULL )
kval = 3
library(caret)
cm <- confusionMatrix(knn1, reference = as.factor(DF_Rt_test_y))
cmaccu = cm$overall['Accuracy']
print( paste("Total Accuracy = ", cmaccu ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
print(data.frame(cm$byClass), title=paste("k = ",kval))
for (kval in 4:11) {
knn_pred <- knn(train = DF_Rt_train_X, test = DF_Rt_test_X, cl=DF_Rt_train_y, k=kval)
knn_crosst <- CrossTable(DF_Rt_test_y, knn_pred, prop.chisq = FALSE)
print( paste("k = ", kval) )
knn_crosst
#
cm = confusionMatrix(knn_pred, reference = as.factor(DF_Rt_test_y))
cmaccu = cm$overall['Accuracy']
print( paste("Total Accuracy = ", cmaccu ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
print(data.frame(cm$byClass), title=paste("k = ",kval))
}
print(ResultDf, "Total Accuracy Summary")
#Copying data for the model
df <- data.frame(bike2)
# delete outliers
df <- outlierKD2(df,Total_Time)
#making rideable_type the first column
colnames(df)
df <- df %>%
select('member_casual', everything())
ggplot(ResultDf,aes(x = k, y = Total.Accuracy)) +
geom_line(color = "orange", size = 1.5) +
geom_point(size = 3) +
labs(title = "accuracy vs k")
knn1 <- knn(train=DF_Rt_train_X, test=DF_Rt_test_X, cl=DF_Rt_train_y, k=9)
knn_crosst <- gmodels::CrossTable(x = DF_Rt_test_y, y = knn1, prop.chisq = FALSE)
# create an empty dataframe to store the results from confusion matrices
ResultDf = data.frame( k=numeric(0), Total.Accuracy= numeric(0), row.names = NULL )
kval = 3
library(caret)
cm <- confusionMatrix(knn1, reference = as.factor(DF_Rt_test_y))
cmaccu = cm$overall['Accuracy']
print( paste("Total Accuracy = ", cmaccu ) )
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL )
ResultDf = rbind(ResultDf, cmt)
print(as.matrix(cm), title = paste("ConfusionMatrix for k = ",kval ) )
print(data.frame(cm$byClass), title=paste("k = ",kval))
knitr::opts_chunk$set(echo = TRUE)
library(purrr)   #to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(ezids)
library(class)
library(gmodels)
library(FNN)
#binding all the files in this path together
file.list <- list.files(pattern='*.csv')
file.list <- setNames(file.list, file.list)
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
colnames(bike)
bike%>%group_by(rideable_type)%>%
summarise(count = n())
#Remove docked bikes
bike <-subset(bike, rideable_type != "docked_bike")
bike%>%group_by(rideable_type)%>%
summarise(count = n())
bike$rideable_type <- factor(ifelse(bike$rideable_type=="classic_bike",0,1))
bike$start_station_id <- factor(bike$start_station_id)
bike$end_station_id <- factor(bike$end_station_id)
bike$member_casual<-factor(ifelse(bike$member_casual=='casual',0,1))
# Formatting started_at and ended_at column to date and time column
bike$start_time <- format(as.POSIXct(bike$started_at), format = "%H:%M")
bike$end_time <- format(as.POSIXct(bike$ended_at), format = "%H:%M")
# Fixing the date format to get the time difference
bike$Startedat = as.POSIXct(bike$started_at, format = "%Y-%m-%d %H:%M:%S")
bike$enddat = as.POSIXct(bike$ended_at, format = "%Y-%m-%d %H:%M:%S")
#Calculating the time difference
bike$Total_Time <- abs(as.numeric(difftime(bike$enddat, bike$Startedat, units = "mins")))
#Extracting the day from the date
bike$start_date <- as.Date(bike$started_at)
bike$end_date <- as.Date(bike$ended_at)
bike$days <- factor(format(bike$start_date, format = "%a"))
#Converting time in minutes
res <- hm(bike$start_time)# format to 'hours:minutes'
bike$startingm <- hour(res)*60 + minute(res)
res <- hm(bike$end_time)# format to 'hours:minutes'
bike$endingm <- hour(res)*60 + minute(res)
print(head(bike))
str(bike)
#selecting the features needed for the model
selected_features <- c('member_casual','rideable_type', 'Total_Time', 'start_station_id', 'end_station_id', 'startingm','endingm','days')
bike2 <- bike[,(names(bike) %in% selected_features)]
#Removing NA values
bike2<-na.omit(bike2)
str(bike2)
#Copying data for the model
bike_RT_LR <- data.frame(bike2)
#df <- outlierKD2(df,Total_Time)
#making rideable_type the first column
colnames(bike_RT_LR)
bike_RT_LR <- bike_RT_LR %>%
select('rideable_type', everything())
bike_RT_LR%>%group_by(rideable_type)%>%
summarise(count = n())
bike_RT_LR %>% count(rideable_type)
ggplot(bike_RT_LR, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
#scaleddf <- as.data.frame(scale(df[2:13], center = TRUE, scale = TRUE))
set.seed(333)
bike_RT_LR_sample <- sample(2, nrow(bike_RT_LR), replace=TRUE, prob=c(0.75, 0.25))
bike_RT_LR_train_X <- bike_RT_LR[bike_RT_LR_sample==1, 2:8]
bike_RT_LR_test_X <- bike_RT_LR[bike_RT_LR_sample==2, 2:8]
bike_RT_LR_train_Y <- bike_RT_LR[bike_RT_LR_sample==1, 1]
bike_RT_LR_test_Y <- bike_RT_LR[bike_RT_LR_sample==2, 1]
str(bike_RT_LR_train_X)
Bike_Type_Logit <- glm(bike_RT_LR_train_Y ~ start_station_id+ end_station_id+Total_Time*member_casual+ startingm*days +endingm , data = bike_RT_LR_train_X, family = "binomial")
summary(Bike_Type_Logit)
prob=predict(Bike_Type_Logit, type = "response")
a <- roc(bike_RT_LR_train_Y~prob)
auc(a) # area-under-curve
plot(a)
proc=predict(Bike_Type_Logit, type = "response", newdata = bike_RT_LR_test_X)
bike_RT_LR_test_X$proc=proc
b <- roc(bike_RT_LR_test_Y~proc)
print(b)
plot(b)
logitpredict.5 <- predict(Bike_Type_Logit, newdata = bike_RT_LR_test_X, type = "response") > 0.55
defult <- ifelse(logitpredict.5 =="TRUE", 1, 0)
crossTable = table(defult,bike_RT_LR_test_Y)
t <- as.data.frame(crossTable)
crossTable
ggplot(data =  t, mapping = aes(x = defult, y = bike_RT_LR_test_Y)) +
geom_tile(aes(fill = Freq), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = "#98c1d9", high = "#8f2d56") +
theme_bw() +
theme(legend.position = "none") +
labs(title = "Confution Matrix with Cutoff at 0.05")+
xlab( "predected")+
ylab( "original")
format(100*(crossTable[1,1]+crossTable[2,2])/sum(crossTable), digits=4)
format(100*(crossTable4[1,1]+crossTable4[2,2])/sum(crossTable4), digits=4)
format(100*(crossTable4[1,1]+crossTable4[2,2])/sum(crossTable4), digits=4)
logitpredict.4 <- predict(Bike_Type_Logit, newdata = bike_RT_LR_test_X, type = "response") > 0.6
defult2 <- ifelse(logitpredict.4 =="TRUE", 1, 0)
crossTable4 = table(defult2,bike_RT_LR_test_Y)
d <- as.data.frame(crossTable4)
crossTable4
format(100*(crossTable4[1,1]+crossTable4[2,2])/sum(crossTable4), digits=4)
ggplot(data = d , mapping = aes(x = defult2, y = bike_RT_LR_test_Y)) +
geom_tile(aes(fill = Freq), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = "#98c1d9", high = "#8f2d56") +
theme_bw() +
theme(legend.position = "none")+
labs(title = "Confution Matrix with Cutoff at 0.04")+
xlab( "predected")+
ylab( "original")
glm1 <- data.frame(start_station_id= "15", end_station_id = "11", Total_Time = 2, member_casual = "0", startingm = 80, days = "Sun", endingm = 100)
predict(Bike_Type_Logit, newdata=glm1)
bike%>%group_by(rideable_type)%>%
summarise(count = n())
bike_RT_LR %>% count(rideable_type)
ggplot(bike_RT_LR, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
#Remove docked bikes
bike <-subset(bike, rideable_type != "docked_bike")
bike%>%group_by(rideable_type)%>%
summarise(count = n())
bike_RT_LR %>% count(rideable_type)
ggplot(bike_RT_LR, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
bike%>%group_by(rideable_type)%>%
summarise(count = n())
bike_RT_LR %>% count(rideable_type)
ggplot(bike_RT_LR, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
knitr::opts_chunk$set(echo = TRUE)
library(purrr)   #to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(ezids)
library(class)
library(gmodels)
library(FNN)
#binding all the files in this path together
file.list <- list.files(pattern='*.csv')
file.list <- setNames(file.list, file.list)
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
colnames(bike)
bike%>%group_by(rideable_type)%>%
summarise(count = n())
bike_RT_LR %>% count(rideable_type)
ggplot(bike_RT_LR, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
bike%>%group_by(rideable_type)%>%
summarise(count = n())
bike %>% count(rideable_type)
ggplot(bike_RT_LR, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
knitr::opts_chunk$set(echo = TRUE)
library(purrr)   #to join all files
library(lubridate)# for duration of time
library(ModelMetrics)
library(pROC)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(ezids)
library(class)
library(gmodels)
library(FNN)
#binding all the files in this path together
file.list <- list.files(pattern='*.csv')
file.list <- setNames(file.list, file.list)
bike <-map_df(file.list, function(x) read.csv(x))
str(bike)
bike%>%group_by(rideable_type)%>%
summarise(count = n())
bike %>% count(rideable_type)
ggplot(bike_RT_LR, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
bike%>%group_by(rideable_type)%>%
summarise(count = n())
bike %>% count(rideable_type)
ggplot(bike, aes(rideable_type, fill = rideable_type))+
geom_bar()+
scale_fill_brewer(palette = "BuPu")+
guides(fill="none")+
labs(title = "User bike types", x= "bike types")+
theme_classic()
#Remove docked bikes
bike <-subset(bike, rideable_type != "docked_bike")
bike%>%group_by(rideable_type)%>%
summarise(count = n())
bike_RT_LR %>% count(rideable_type)
